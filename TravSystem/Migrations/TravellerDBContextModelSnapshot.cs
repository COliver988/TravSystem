// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyEfCoreApp.Data;

#nullable disable

namespace TravSystem.Migrations
{
    [DbContext(typeof(TravellerDBContext))]
    partial class TravellerDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("TPlanetTSystem", b =>
                {
                    b.Property<int>("PlanetsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TSystemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlanetsId", "TSystemId");

                    b.HasIndex("TSystemId");

                    b.ToTable("TPlanetTSystem", (string)null);
                });

            modelBuilder.Entity("TravSystem.Models.TAtmosphere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Atmospheres", (string)null);
                });

            modelBuilder.Entity("TravSystem.Models.TBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Bases", (string)null);
                });

            modelBuilder.Entity("TravSystem.Models.TGovernment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Governments", (string)null);
                });

            modelBuilder.Entity("TravSystem.Models.TLawLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LawLevels", (string)null);
                });

            modelBuilder.Entity("TravSystem.Models.TPlanet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hydrographics")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Orbit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Population")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TAtmosphereId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TGovernmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TLawLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TPlanetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TStarportId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TSubSectorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TravelCodeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TAtmosphereId");

                    b.HasIndex("TGovernmentId");

                    b.HasIndex("TLawLevelId");

                    b.HasIndex("TStarportId");

                    b.HasIndex("TSubSectorId");

                    b.HasIndex("TravelCodeId");

                    b.ToTable("Planets", (string)null);
                });

            modelBuilder.Entity("TravSystem.Models.TSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GasGiantCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GasGiantPresent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlanetoidBeltCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlanetoidBeltPresent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StellarDensity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StellerBinary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StellerSolo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StellerTrinary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Settings", (string)null);
                });

            modelBuilder.Entity("TravSystem.Models.TStarport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DieRollMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DieRollMin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Starports", (string)null);
                });

            modelBuilder.Entity("TravSystem.Models.TStellarTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanionOrbit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanionSize")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StellarTypes", (string)null);
                });

            modelBuilder.Entity("TravSystem.Models.TStellarZones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Orbit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TStellarTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TStellarTypeId");

                    b.ToTable("StellarZones", (string)null);
                });

            modelBuilder.Entity("TravSystem.Models.TSubSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SubSectors", (string)null);
                });

            modelBuilder.Entity("TravSystem.Models.TSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GasGiantCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlanetoidBelts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PopulationModifier")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubSectorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SubSectorId");

                    b.ToTable("Systems", (string)null);
                });

            modelBuilder.Entity("TravSystem.Models.TSystemTBases", b =>
                {
                    b.Property<int>("TSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TBaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("TSystemId", "TBaseId");

                    b.HasIndex("TBaseId");

                    b.ToTable("SystemTBases", (string)null);
                });

            modelBuilder.Entity("TravSystem.Models.TTravelCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TravelCodes", (string)null);
                });

            modelBuilder.Entity("TravSystem.Models.TradeClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Atmo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Government")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hydro")
                        .HasColumnType("TEXT");

                    b.Property<string>("LawLevel")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Population")
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .HasColumnType("TEXT");

                    b.Property<string>("TechLevel")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TradeClassifications", (string)null);
                });

            modelBuilder.Entity("TPlanetTSystem", b =>
                {
                    b.HasOne("TravSystem.Models.TPlanet", null)
                        .WithMany()
                        .HasForeignKey("PlanetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravSystem.Models.TSystem", null)
                        .WithMany()
                        .HasForeignKey("TSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravSystem.Models.TPlanet", b =>
                {
                    b.HasOne("TravSystem.Models.TAtmosphere", "Atmosphere")
                        .WithMany()
                        .HasForeignKey("TAtmosphereId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravSystem.Models.TGovernment", "Government")
                        .WithMany()
                        .HasForeignKey("TGovernmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravSystem.Models.TLawLevel", "LawLevel")
                        .WithMany()
                        .HasForeignKey("TLawLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravSystem.Models.TStarport", "Starport")
                        .WithMany()
                        .HasForeignKey("TStarportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravSystem.Models.TSubSector", "SubSector")
                        .WithMany()
                        .HasForeignKey("TSubSectorId");

                    b.HasOne("TravSystem.Models.TTravelCode", "TravelCode")
                        .WithMany()
                        .HasForeignKey("TravelCodeId");

                    b.Navigation("Atmosphere");

                    b.Navigation("Government");

                    b.Navigation("LawLevel");

                    b.Navigation("Starport");

                    b.Navigation("SubSector");

                    b.Navigation("TravelCode");
                });

            modelBuilder.Entity("TravSystem.Models.TStellarZones", b =>
                {
                    b.HasOne("TravSystem.Models.TStellarTypes", "TStellarType")
                        .WithMany("StellarZones")
                        .HasForeignKey("TStellarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TStellarType");
                });

            modelBuilder.Entity("TravSystem.Models.TSystem", b =>
                {
                    b.HasOne("TravSystem.Models.TSubSector", "SubSector")
                        .WithMany()
                        .HasForeignKey("SubSectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubSector");
                });

            modelBuilder.Entity("TravSystem.Models.TSystemTBases", b =>
                {
                    b.HasOne("TravSystem.Models.TBase", "TBase")
                        .WithMany("SystemBases")
                        .HasForeignKey("TBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravSystem.Models.TSystem", "TSystem")
                        .WithMany("SystemBases")
                        .HasForeignKey("TSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TBase");

                    b.Navigation("TSystem");
                });

            modelBuilder.Entity("TravSystem.Models.TBase", b =>
                {
                    b.Navigation("SystemBases");
                });

            modelBuilder.Entity("TravSystem.Models.TStellarTypes", b =>
                {
                    b.Navigation("StellarZones");
                });

            modelBuilder.Entity("TravSystem.Models.TSystem", b =>
                {
                    b.Navigation("SystemBases");
                });
#pragma warning restore 612, 618
        }
    }
}
